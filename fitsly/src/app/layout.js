'use client';

import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Navbar from "./components/Navbar";
import Footer from "./components/Footer";
import { useEffect, useState, createContext } from "react";
import { useRouter } from "next/navigation";
import { usePathname } from 'next/navigation'
import LoadingBar from "react-top-loading-bar";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// âœ… Export context here
export const CartContext = createContext();

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({ children }) {
  const [cart, setCart] = useState({});
  const [subTotal, setSubTotal] = useState(0);
  const [user, setUser] = useState({ value: null })
  const [key, setKey] = useState(0)
  const [progress, setProgress] = useState(0);

  const pathname = usePathname()
  const router = useRouter()

  useEffect(() => {
    // Mimic "routeChangeStart"
    setProgress(40)

    // Mimic "routeChangeComplete"
    const timeout = setTimeout(() => {
      setProgress(100)
    }, 350) 

    try {
      if (localStorage.getItem("cart")) {
        setCart(JSON.parse(localStorage.getItem("cart")));
        saveCart(JSON.parse(localStorage.getItem("cart")))
      }
    } catch (error) {
      localStorage.clear();
    }

    const token = localStorage.getItem('token')
    if (token) {
      setUser({ value: token })
      setKey(Math.random())
    }
    return () => clearTimeout(timeout)
  }, [router.query , pathname ]);

  const saveCart = (myCart) => {
    localStorage.setItem("cart", JSON.stringify(myCart));
    let subt = 0;
    let keys = Object.keys(myCart)
    for (let i = 0; i < keys.length; i++) {
      subt += myCart[keys[i]].price * myCart[keys[i]].qty;
    }
    setSubTotal(subt)
  };

  const addToCart = (itemCode, qty, price, name, size, variant) => {
    let newCart = { ...cart };

    if (itemCode in newCart) {
      newCart[itemCode].qty += qty;
    } else {
      newCart[itemCode] = { qty: qty, price, name, size, variant }; // ðŸ‘ˆ use qty passed!
    }

    setCart(newCart);
    saveCart(newCart);
  };


  const removeFromCart = (itemCode, qty) => {
    let newCart = { ...cart };
    if (itemCode in newCart) {
      newCart[itemCode].qty = cart[itemCode].qty - qty;
    }
    if (newCart[itemCode]?.qty <= 0) {
      delete newCart[itemCode];
    }
    setCart(newCart);
    saveCart(newCart);
  };

  const clearCart = () => {
    setCart({});
    saveCart({});
  };

  const buyNow = (itemCode, qty, price, name, size, variant) => {

    let newCart = { itemCode: { qty: 1, price, name, size, variant } };

    setCart(newCart);
    saveCart(newCart);

    router.push('/checkout')
  }

  const logout = () => {
    localStorage.removeItem('token')
    setUser({ value: null })
    setKey(Math.random())
  }

  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <LoadingBar
          color="#ff2d55"
          progress={progress}
          onLoaderFinished={() => setProgress(0)}
        />
        {/* âœ… Wrap everything in the provider */}
        <CartContext.Provider
          value={{ logout, user, key, buyNow, cart, setCart, addToCart, removeFromCart, clearCart, subTotal }}
        >
          {key && <Navbar key={subTotal} />}
          {children}
          <Footer />
        </CartContext.Provider>
      </body>
    </html>
  );
}
